
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // PUBLIC-READABLE COLLECTIONS
    match /services/{serviceId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
    match /siteProfiles/{profileId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
    match /globalAvailability/{dateString} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
    match /badges/{badgeId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
    
    // TESTIMONIALS
    match /testimonials/{testimonialId} {
      allow read: if resource.data.status == 'approved';
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.token.isAdmin == true;
    }
    
    // USER-SPECIFIC DATA
    match /userProfiles/{userId} {
      allow read: if request.auth != null; // Any authenticated user can read any profile (for avatars, names etc)
      allow create: if request.auth != null && request.auth.uid == userId; // Allow user to create their own profile doc
      allow update: if request.auth != null && request.auth.uid == userId; // User can update their own profile
      allow write: if request.auth != null && request.auth.token.isAdmin == true; // Admin can write to any profile
    }
    
    match /bookings/{bookingId} {
        allow read, update: if request.auth != null && (resource.data.uid == request.auth.uid || request.auth.token.isAdmin == true);
        allow create: if request.auth != null;
        allow delete: if request.auth != null && request.auth.token.isAdmin == true;
    }

    match /userMessages/{messageId} {
      allow create: if request.auth != null; // Authenticated users can send messages
      allow read, update: if request.auth != null && (resource.data.userEmail == request.auth.email || request.auth.token.isAdmin == true);
      allow delete: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // ADMIN-ONLY COLLECTIONS
    match /feedbackSubmissions/{submissionId} {
      allow read, write: if request.auth != null && request.auth.token.isAdmin == true;
    }
    match /resources/{resourceId} {
      allow read: if request.auth != null; // Assume all auth'd users can see resources for now
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
  }
}
