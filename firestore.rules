rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(uid) {
      return exists(/databases/$(database)/documents/userProfiles/$(uid)) &&
             get(/databases/$(database)/documents/userProfiles/$(uid)).data.roles.hasAny(['admin']);
    }

    // Helper function to check if a user is the owner of a document
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }
    
    // User Profiles:
    // - Users can read and write their own profile.
    // - Admins can read all profiles.
    match /userProfiles/{uid} {
      allow read: if isOwner(uid) || isAdmin(request.auth.uid);
      allow write: if isOwner(uid) || isAdmin(request.auth.uid);
      
      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if isOwner(uid);
      }
    }

    // Services:
    // - Publicly readable.
    // - Writable only by admins.
    match /services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }

    // Bookings:
    // - Users can read their own bookings.
    // - Users can create their own bookings.
    // - Users can update their own booking for specific fields (refund request).
    // - Admins can read and write all bookings.
    match /bookings/{bookingId} {
      allow read: if isOwner(resource.data.uid) || isAdmin(request.auth.uid);
      allow create: if isOwner(request.resource.data.uid);
      allow update: if (isOwner(resource.data.uid) && request.resource.data.keys().hasAll(['requestedRefund', 'refundReason'])) || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Testimonials:
    // - Approved testimonials are publicly readable.
    // - Users can create their own testimonials.
    // - Admins can read, update (approve/reject), and delete all.
    match /testimonials/{testimonialId} {
        allow read: if resource.data.status == 'approved' || isOwner(resource.data.uid) || isAdmin(request.auth.uid);
        allow create: if isOwner(request.resource.data.uid);
        allow update, delete: if isAdmin(request.auth.uid);
    }

    // Resources:
    // - Publicly readable to allow access for all entitled users (entitlement checked on client/function).
    // - Writable only by admins.
    match /resources/{resourceId} {
        allow read: if true;
        allow write: if isAdmin(request.auth.uid);
    }
    
    // Badges:
    // - Publicly readable.
    // - Writable only by admins.
    match /badges/{badgeId} {
        allow read: if true;
        allow write: if isAdmin(request.auth.uid);
    }

    // Global Availability:
    // - Publicly readable for anyone to check slots.
    // - Writable only by admins.
    match /globalAvailability/{date} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }

    // Site Profiles (e.g., Mentor Profile):
    // - Publicly readable.
    // - Writable only by admins.
    match /siteProfiles/{profileId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
    
    // Site Content (e.g., Hero Section):
    // - Publicly readable.
    // - Writable only by admins.
    match /siteContent/{contentId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }

    // User Messages:
    // - Users can create messages (starting a thread).
    // - Users can only read messages where their UID matches.
    // - Admins can read all messages and write replies.
    match /userMessages/{messageId} {
      allow read: if isOwner(resource.data.uid) || isAdmin(request.auth.uid);
      allow create: if isOwner(request.resource.data.uid) || isAdmin(request.auth.uid);
      allow update: if isAdmin(request.auth.uid); // For status changes
    }
    
    // Feedback Submissions (Audit log):
    // - Writable and readable only by admins.
    match /feedbackSubmissions/{submissionId} {
        allow read, write: if isAdmin(request.auth.uid);
    }
  }
}
