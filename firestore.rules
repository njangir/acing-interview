
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Function to check if a user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    // User can read/write their own profile. Admins can read all.
    match /userProfiles/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow list: if isAdmin(); // Admins can list users
    }
    
    // Services are publicly readable, writable only by admins.
    match /services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Bookings can be created by logged-in users for themselves.
    // They can read their own bookings.
    // Admins can read all and update any booking.
    match /bookings/{bookingId} {
      allow read: if request.auth != null && (resource.data.uid == request.auth.uid || isAdmin());
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update: if (request.auth != null && resource.data.uid == request.auth.uid && request.resource.data.requestedRefund == true) || isAdmin();
      // Users can only update to request a refund. Admins can do any update.
    }
    
    // Badges are publicly readable, writable only by admins.
    match /badges/{badgeId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Testimonials can be created by any authenticated user.
    // Only approved testimonials are publicly readable.
    // Admins can manage all testimonials.
    match /testimonials/{testimonialId} {
      allow read: if resource.data.status == 'approved';
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
    }
    
    // Availability slots are publicly readable, writable only by admins.
    match /globalAvailability/{date} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Resources are readable by authenticated users (logic for specific entitlements can be added).
    // Writable only by admins.
    match /resources/{resourceId} {
      allow read: if request.auth != null; // Simplistic rule, can be refined based on user purchases
      allow write: if isAdmin();
    }

    // Users can create messages for themselves. Admins can read all and reply.
    match /userMessages/{messageId} {
      allow read: if request.auth != null && (resource.data.uid == request.auth.uid || isAdmin());
      allow create: if request.auth != null && (request.resource.data.uid == request.auth.uid || isAdmin());
      allow update: if isAdmin(); // Only admins can change status (e.g., to 'read' or 'closed')
    }

    // Feedback submissions are write-only for admins. No public read access.
    match /feedbackSubmissions/{submissionId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Mentor profile is publicly readable, writable only by admins.
     match /siteProfiles/mainMentor {
      allow read: if true;
      allow write: if isAdmin();
    }
    
  }
}

    