
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can read/write their own profile, admins can read all profiles.
    match /userProfiles/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // Function handles creation
      allow read: if request.auth != null && request.auth.token.isAdmin == true;
    }
    
    // Services are publicly readable, but only admins can modify them.
    match /services/{serviceId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
    
    // Bookings can be created by any authenticated user for themselves.
    // Users can read/update their own bookings. Admins can read/update all bookings.
    match /bookings/{bookingId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow read, update: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow read, update: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // Availability is public to read, but only admins can write.
    match /globalAvailability/{date} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // Users can submit testimonials. Only approved are public. Admins manage all.
    match /testimonials/{testimonialId} {
      allow read: if resource.data.status == 'approved';
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.token.isAdmin == true;
    }
    
    // Users can create messages. They can only read messages in their own "thread".
    // Admins can read all and reply.
    match /userMessages/{messageId} {
        allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
        allow read: if request.auth != null && request.auth.uid == resource.data.uid;
        // Admin access
        allow read, write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // Badges are public to read, admin to write.
    match /badges/{badgeId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

    