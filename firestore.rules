
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/userProfiles/$(userId)) && 
             get(/databases/$(database)/documents/userProfiles/$(userId)).data.roles.hasAny(['admin']);
    }

    // Publicly readable collections
    match /services/{serviceId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /testimonials/{testimonialId} {
        allow read: if resource.data.status == 'approved';
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /siteProfiles/{profileId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /globalAvailability/{date} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /badges/{badgeId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // User-specific or admin-only collections
    match /userProfiles/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
      allow create: if request.auth != null; // Allows new user profile creation
    }
    
    match /bookings/{bookingId} {
      // User can read their own bookings
      allow read: if request.auth != null && (request.auth.uid == resource.data.uid || isAdmin(request.auth.uid));
      // User can create new bookings or request refunds on their own bookings.
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update: if request.auth != null && ( (request.auth.uid == resource.data.uid && request.resource.data.requestedRefund == true) || isAdmin(request.auth.uid));
      // Admins can manage all bookings
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /resources/{resourceId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /userMessages/{messageId} {
        // Users can create messages and read their own threads.
        allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
        allow read: if request.auth != null && (resource.data.uid == request.auth.uid || isAdmin(request.auth.uid));
        // Admins can manage all messages.
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /feedbackSubmissions/{submissionId} {
        allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
