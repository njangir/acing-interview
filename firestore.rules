
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // UTILITY: Helper functions to check user roles
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/userProfiles/$(userId)).data.roles.hasAny(['admin']);
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- COLLECTION RULES ---

    // userProfiles: Users can read/write their own profile. Admins can read all.
    match /userProfiles/{userId} {
      allow read: if isOwner(userId) || isAdmin(request.auth.uid);
      allow write: if isOwner(userId);
      // Admin role changes should be handled by a secure backend function (e.g., Cloud Function with custom claims).
    }

    // services: Publicly readable, admin-only write access.
    match /services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
    
    // siteProfiles: Publicly readable (for Mentor), admin-only write access.
    match /siteProfiles/{profileId} {
        allow read: if true;
        allow write: if isAdmin(request.auth.uid);
    }

    // bookings: Users can create their own bookings, read their own, and update for refund requests. Admins can manage all.
    match /bookings/{bookingId} {
      allow read: if isOwner(resource.data.uid) || isAdmin(request.auth.uid);
      allow create: if isOwner(request.resource.data.uid); // User can only create a booking for themselves
      allow update: if (isOwner(resource.data.uid) && request.resource.data.requestedRefund == true) || isAdmin(request.auth.uid);
    }

    // globalAvailability: Publicly readable, admin-only write access.
    match /globalAvailability/{dateString} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }

    // testimonials: Users can submit. Admins can manage. Public can read approved ones.
    match /testimonials/{testimonialId} {
      allow read: if resource.data.status == 'approved';
      allow create: if request.auth != null; // Any authenticated user can submit
      allow update: if isAdmin(request.auth.uid); // Only admins can change status etc.
    }
    
    // resources: Assuming all authenticated users can read. Admin-only write.
    // More complex rules could link this to purchased services via user profile.
    match /resources/{resourceId} {
        allow read: if request.auth != null;
        allow write: if isAdmin(request.auth.uid);
    }
    
    // userMessages: Users can create for themselves. Admins can manage.
    match /userMessages/{messageId} {
        // User can only create messages where they are the sender
        allow create: if request.resource.data.uid == request.auth.uid && request.resource.data.senderType == 'user';
        // Users can only read messages in their own "thread" (same email & subject). Admins can read all.
        allow read: if resource.data.userEmail == request.auth.token.email || isAdmin(request.auth.uid);
        // Only admins can write replies or update status
        allow update: if isAdmin(request.auth.uid) || (request.resource.data.senderType == 'admin');
    }
    
    // badges: Publicly readable, admin-only write access.
    match /badges/{badgeId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }

    // feedbackSubmissions: Writeable only by admins for logging purposes.
    match /feedbackSubmissions/{submissionId} {
        allow read, write: if isAdmin(request.auth.uid);
    }
    
    // CATCH-ALL: Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Allow public read on service images and avatars
    match /services/{imageName} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    
    match /testimonials_body_images/{imageName} {
        allow read: if true; // public read for approved testimonials
        allow write: if request.auth != null; // any authenticated user can upload
    }

    // Feedback reports can only be written by admins.
    // Reading them is handled by generating a download URL in the app, which has its own token.
    // Direct read access can be locked down.
    match /feedback_reports/{fileName} {
      allow read: if request.auth != null; // Users can read if they have the link
      allow write: if request.auth != null && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    
    // Deny all other storage access by default
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
