
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // USERS can only read/write their own profile.
    // ADMINS can read any profile.
    match /userProfiles/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      allow read: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // SERVICES are publicly readable. Only admins can write.
    match /services/{serviceId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // MENTOR PROFILE is publicly readable. Only admins can write.
     match /siteProfiles/{profileId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // TESTIMONIALS can be created by logged-in users.
    // Public can only read approved testimonials.
    // Admins can manage all testimonials.
    match /testimonials/{testimonialId} {
      allow read: if resource.data.status == 'approved';
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.token.isAdmin == true;
    }
    
    // BOOKINGS can be created, read, and updated (for refunds) by the user who owns them.
    // Admins have full read/write access to all bookings.
    match /bookings/{bookingId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if request.auth != null;
      // Admin Access
      allow read, write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // AVAILABILITY is publicly readable. Only admins can write.
    match /globalAvailability/{date} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // BADGES are publicly readable. Only admins can write.
    match /badges/{badgeId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
    
    // RESOURCES rules would go here. For now, deny all.
    match /resources/{resourceId} {
      allow read, write: if false; // Define rules later
    }

    // MESSAGES can be created by the user. Admins can read all and write replies.
    match /userMessages/{messageId} {
        // User can create a message for themselves.
        allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
        // User can only read messages in their own "thread" (based on their UID).
        allow read: if request.auth != null && request.auth.uid == resource.data.uid;
        // Admin can read/write all messages.
        allow read, write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // FEEDBACK SUBMISSIONS are write-only for admins.
    match /feedbackSubmissions/{submissionId} {
        allow read: if request.auth != null && request.auth.token.isAdmin == true;
        allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }

    // Fallback rule to deny access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
