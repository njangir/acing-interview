rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to keep rules DRY
    function isLoggedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isLoggedIn() && request.auth.uid == userId;
    }

    // Function to check if the user has an 'admin' role in their profile
    function isAdmin() {
      return isLoggedIn() && get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    // Default deny all access unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }

    // User Profiles: Users can read/write their own profile. Admins can read all profiles.
    match /userProfiles/{userId} {
      allow get: if isLoggedIn(); // All logged-in users can read profiles (e.g., for avatars)
      allow list: if isLoggedIn();
      allow create: if isOwner(userId); // Allows new user profile creation after sign-up
      allow update: if isOwner(userId); // Users can update their own profile
      allow delete: if isAdmin(); // Only admins can delete profiles
    }

    // Services: Publicly readable, only admins can write.
    match /services/{serviceId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    // Bookings: Users can manage their own bookings. Admins have full access.
    match /bookings/{bookingId} {
      allow read: if isOwner(resource.data.uid) || isAdmin();
      allow create: if isLoggedIn(); // Any logged-in user can create a booking request
      allow update: if isOwner(resource.data.uid) || isAdmin(); // User can update (e.g., request refund), admin can update (e.g., accept)
      allow delete: if isAdmin();
    }

    // Availability: Publicly readable for slot display. Only admins can write.
    match /globalAvailability/{date} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    // Mentor Profile: Publicly readable, only admins can write.
    match /siteProfiles/mainMentor {
        allow get: if true;
        allow write: if isAdmin();
    }

    // Testimonials: Users can create. Approved are public. Admins can manage all.
    match /testimonials/{testimonialId} {
      allow get: if resource.data.status == 'approved' || isAdmin();
      allow list: if true; // Allows querying for approved testimonials
      allow create: if isLoggedIn();
      allow update, delete: if isAdmin();
    }

    // Resources: Readable by logged-in users. Writable only by admins.
    // More complex rules could limit access based on purchased services.
    match /resources/{resourceId} {
      allow get, list: if isLoggedIn();
      allow write: if isAdmin();
d
    }

    // User Messages: Users can create/read their own threads. Admins can read all and reply.
    match /userMessages/{messageId} {
      allow read: if isOwner(resource.data.uid) || isAdmin();
      allow create: if isLoggedIn();
      allow update: if isAdmin(); // Only admins can change status (e.g., 'read', 'closed')
      allow delete: if isAdmin();
    }

    // Badges: Publicly readable. Only admins can write.
    match /badges/{badgeId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }

    // Feedback Submissions (Audit Log): Writable and readable only by admins.
    match /feedbackSubmissions/{submissionId} {
      allow read, write: if isAdmin();
    }
    
    // Notifications: Users can only interact with their own notifications.
    match /userProfiles/{userId}/notifications/{notificationId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isAdmin(); // Functions/backend creates notifications
    }
  }
}
