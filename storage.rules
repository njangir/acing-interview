rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to check for admin role from Firestore
    function isAdmin() {
      return get(/databases/$(database)/documents/userProfiles/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    // Allow public read access for general site content and service images
    match /site_content/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && isAdmin();
    }
    
    match /services/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && isAdmin();
    }

    // Users can only write to their own profile image path
    match /user_profiles/{userId}/{allPaths=**} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Feedback reports are only writable by admin and readable by the user who owns the booking
    match /feedback_reports/{fileName} {
      // Filename format: {bookingId}_{timestamp}_{originalFileName}
      // Extract bookingId from the filename
      let bookingId = fileName.split('_')[0];
      // Get the booking document to find the owner's UID
      let bookingOwnerUid = get(/databases/$(database)/documents/bookings/$(bookingId)).data.uid;
      
      allow read: if request.auth != null && request.auth.uid == bookingOwnerUid;
      allow write: if request.auth != null && isAdmin();
    }

    // Testimonial images are writable by the user, readable by public if approved (more complex rule, simplified for now)
    match /testimonials_body_images/{fileName} {
        allow read; // Simplification for now
        allow write: if request.auth != null;
    }
    
    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
